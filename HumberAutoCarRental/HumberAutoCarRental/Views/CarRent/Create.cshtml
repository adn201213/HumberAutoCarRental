@model HumberAutoCarRental.ViewModel.CarRentalViewModel
@using HumberAutoCarRental.Utility
@{
    ViewBag.Title = "Create";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken();
    @Html.ValidationSummary("", new { @class = "text-danger" })


<div class="form-horizontal">
    <h3>Add New Car</h3>
    <hr />
    @Html.ValidationSummary(false, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextBoxFor(model => model.Email, new { id = "email", @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.CarName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextBoxFor(model => model.CarName, new { id = "carName1", @class = "form-control" })
            @Html.ValidationMessageFor(model => model.CarName, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.PlateId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextBoxFor(model => model.PlateId, new { id = "plateid1", @class = "form-control" })
            @Html.ValidationMessageFor(model => model.PlateId, "", new { @class = "text-danger" })
        </div>
    </div>




    @{
        List<SelectListItem> listItem = new List<SelectListItem>();
        listItem.Add(new SelectListItem
        {
            Text = SD.OneDay,
            Value = SD.OneDayCount
        });
        listItem.Add(new SelectListItem
        {
            Text = SD.OneWeek,
            Value = SD.OneWeekCount
        });
        listItem.Add(new SelectListItem
        {
            Text = SD.OneMonth,
            Value = SD.OneMonthCount
        });
        listItem.Add(new SelectListItem
        {
            Text = SD.ThreeMonths,
            Value = SD.ThreeMonthCount
        });
        listItem.Add(new SelectListItem
        {
            Text = SD.SixMonth,
            Value = SD.SixMonthCount
        });
        listItem.Add(new SelectListItem
        {
            Text = SD.OneYear,
            Value = SD.OneYearCount
        });
    }

    <div class="form-group">
        @Html.LabelFor(model => model.RentalDuration, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.RentalDuration, listItem, new { id = "ddlRentalDuration", @class = "form-control" })
            @Html.ValidationMessageFor(model => model.RentalDuration, "", new { @class = "text-danger" })
        </div>
    </div>
    <div id="nameAndDob" style="display:none">

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.Label(" ", new { id = "firstName", style = "width:350px;", @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.BirthDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.Label(" ", new { id = "birthDate", style = "width:350px;", @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.RentalPrice, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.Label(" ", new { id = "lblRentalPrice", style = "width:350px;", @class = "form-control" })

                @Html.Label("Discounted Rate", new { id = "lblDiscountDisplay", style = "width:350px;color:green;display:none;" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Avaibility, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.Label(" ", new { id = "lblAvaibility", style = "width:350px;", @class = "form-control" })
            </div>
        </div>
    </div>




    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="button" value="Check Avaibility" id="btnAvailibility" class="btn btn-sm btn-success" />
            <input type="submit" value="Reserve" id="btnSubmit" style="display:none;" class="btn btn-sm btn-success" />
            <span>
                @Html.Partial("_BackToListButtonPartial")
            </span>


        </div>
    </div>


</div>

}

@section scripts{

    <script>
        $(document).ready(function () {
            var customers = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('email'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                // `states` is an array of state names defined in "The Basics"
                remote: {
                    url: '/Api/UsersAPI?type=email&query=%QUERY',
                    wildcard: '%QUERY'
                }
            });
            $('#email').typeahead({ highlight: true, minLength: 3 },
                {
                    name: 'customers',
                    display: 'Email',
                    source: customers
                });

            //car name

            var carName2 = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('CarName'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                // `states` is an array of state names defined in "The Basics"
                remote: {
                    url: '/Api/CarAPI?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });
            $('#carName1').typeahead({ highlight: true, minLength: 3 },
                {
                    name: 'customers',
                    display: 'CarName',
                    source: carName2
                });
        });

        $('#btnAvailibility').click(function () {
            var plateid = document.getElementById("plateid1").value;
            var email = document.getElementById("email").value;
            var rentalDuration = document.getElementById("ddlRentalDuration").value;
            var rentalPrice = 0.0;
            $.ajax({
                url: '/Api/CarAPI?type=avail&plateid=' + plateid,
                type: 'GET',
                dataType: 'json',
                success: function (data, textStatus, xhr) {
                    $('#lblAvaibility').text(data + ' available')
                    if (data > 0) {
                        document.getElementById('btnSubmit').style.display = '';
                    }
                    else {
                        document.getElementById('btnSubmit').value = "Not Available";
                        document.getElementById('btnSubmit').style.display = '';
                        document.getElementById('btnSubmit').disabled = true;
                        document.getElementById('btnSubmit').classList.remove('btn-success');
                        document.getElementById('btnSubmit').classList.add('btn-danger');
                    }
                },
                error: function (xhr, textStatus, errorThrown) {
                }
            });
            $.ajax({
                url: '/Api/CarAPI?type=price&plateid=' + plateid + '&rentalDuration=' + rentalDuration + '&email=' + email,
                type: 'GET',
                dataType: 'json',
                success: function (data, textStatus, xhr) {
                    rentalPrice = data;
                    $('#lblRentalPrice').text(data)
                },
                error: function (xhr, textStatus, errorThrown) {
                }
            });

            $.ajax({
                url: '/Api/UsersAPI?type=name&query=' + email,
                type: 'GET',
                dataType: 'json',
                success: function (data, textStatus, xhr) {
                    var fields = data.split(';')
                    $('#firstName').text(fields[0]);
                    var birthDate = fields[1].split(' ');
                    $('#birthDate').text(birthDate[0])
                    document.getElementById("btnAvailibility").style.display = 'none';
                    document.getElementById("nameAndDob").style.display = '';
                    var rentalCount = fields[2];
                    if (rentalCount == 10) {
                        $('#lblRentalPrice').text(rentalPrice - (rentalPrice * 20 / 100));
                        document.getElementById("lblDiscountDisplay").style.display = '';
                    }
                },
                error: function (xhr, textStatus, errorThrown) {
                }
            });



        });

    </script>

}

